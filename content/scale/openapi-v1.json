{
  "openapi": "3.0.1",
  "info": {
    "title": "Scale API V1",
    "description": "API for Scale, V1",
    "termsOfService": "https://loopholelabs.io/privacy",
    "contact": {
      "name": "API Support",
      "email": "admin@loopholelabs.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.scale.sh/v1"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "operationId": "getHealth",
        "tags": [
          "health"
        ],
        "description": "Returns the health and status of the various services that make up the API.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.HealthResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/registry/function": {
      "post": {
        "operationId": "postRegistryFunction",
        "tags": [
          "registry",
          "function"
        ],
        "description": "Uploads a function to the registry",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "function"
                ],
                "type": "object",
                "properties": {
                  "public": {
                    "type": "boolean",
                    "description": "public"
                  },
                  "function": {
                    "type": "string",
                    "description": "function",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.FunctionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/registry/function/{org}": {
      "get": {
        "operationId": "getRegistryFunctionOrg",
        "tags": [
          "registry",
          "function"
        ],
        "description": "Lists all the functions in the given `org`. If the session is scoped to the same `org`, functions that are not public will be returned, otherwise only public functions will be returned.",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/models.FunctionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/registry/function/{org}/{name}/{tag}": {
      "get": {
        "operationId": "getRegistryFunctionOrgNameTag",
        "tags": [
          "registry",
          "function"
        ],
        "description": "Retrieves a function from the given `org` given its `name` and `tag`. If the session is scoped to the same `org`, functions that are not public will be returned, otherwise only public functions will be returned.",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.GetFunctionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteRegistryFunctionOrg",
        "tags": [
          "registry",
          "function"
        ],
        "description": "Deletes a function given its `name` and `tag`. The function must be a part of the same org that the session is scoped to.",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/registry/signature": {
      "post": {
        "operationId": "postRegistrySignature",
        "tags": [
          "registry",
          "signature"
        ],
        "description": "Creates a new signature. If the session is scoped to an organization, the signature will be created in that `organization`, otherwise the signature will be created to the user's default `organization`.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "name",
                  "signature",
                  "tag"
                ],
                "type": "object",
                "properties": {
                  "signature": {
                    "type": "string",
                    "description": "signature",
                    "format": "binary"
                  },
                  "name": {
                    "type": "string",
                    "description": "name"
                  },
                  "tag": {
                    "type": "string",
                    "description": "tag"
                  },
                  "public": {
                    "type": "boolean",
                    "description": "public"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.SignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/registry/signature/{org}": {
      "get": {
        "operationId": "getRegistrySignatureOrg",
        "tags": [
          "registry",
          "signature"
        ],
        "description": "Lists all the signatures in the given `org`. If the session is scoped to the same `org`, signatures that are not public will be returned, otherwise only public signatures will be returned.",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/models.SignatureResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/registry/signature/{org}/{name}/{tag}": {
      "get": {
        "operationId": "getRegistrySignatureOrgNameTag",
        "tags": [
          "registry",
          "signature"
        ],
        "description": "Retrieves a signature from the given `org` given its `name` and `tag`. If the session is scoped to the same `org`, signatures that are not public will be returned, otherwise only public signatures will be returned.",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.SignatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteRegistrySignatureOrg",
        "tags": [
          "registry",
          "signature"
        ],
        "description": "Deletes a signature given its `name` and `tag`. The signature must be a part of the same org that the session is scoped to.",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "description": "org",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "path",
            "description": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/userinfo": {
      "post": {
        "operationId": "postUserInfo",
        "tags": [
          "userinfo"
        ],
        "description": "Checks if a user is logged in and returns the user's information.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/models.UserInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "models.AttachDomainRequest": {
        "type": "object",
        "properties": {
          "deployment": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "force": {
            "type": "boolean"
          }
        }
      },
      "models.CreateAPIKeyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "models.CreateAPIKeyResponse": {
        "type": "object",
        "properties": {
          "apikey": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          }
        }
      },
      "models.CreateDeploymentRequest": {
        "type": "object",
        "properties": {
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/models.DeploymentFunction"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "models.CreateDomainRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          }
        }
      },
      "models.CreateDomainResponse": {
        "type": "object",
        "properties": {
          "cname": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "txt_cname": {
            "type": "string"
          }
        }
      },
      "models.CreateOrganizationInviteRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "models.CreateOrganizationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "models.DeploymentFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "models.DeploymentResponse": {
        "type": "object",
        "properties": {
          "attached_domain": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/models.FunctionResponse"
            }
          },
          "identifier": {
            "type": "string"
          },
          "root_domain": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          }
        }
      },
      "models.DetachDomainRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "force": {
            "type": "boolean"
          }
        }
      },
      "models.DomainResponse": {
        "type": "object",
        "properties": {
          "cname": {
            "type": "string"
          },
          "deployment": {
            "$ref": "#/components/schemas/models.DeploymentResponse"
          },
          "domain": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/models.DomainVerificationState"
          },
          "txt_cname": {
            "type": "string"
          }
        }
      },
      "models.DomainVerificationState": {
        "type": "string",
        "enum": [
          "pending",
          "issuing",
          "ready",
          "attached"
        ],
        "x-enum-varnames": [
          "DomainVerificationStatePending",
          "DomainVerificationStateIssuing",
          "DomainVerificationStateReady",
          "DomainVerificationStateAttached"
        ]
      },
      "models.FunctionResponse": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "signature": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "models.GetAPIKeyResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          }
        }
      },
      "models.GetFunctionResponse": {
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/models.FunctionResponse"
          },
          "presigned_url": {
            "type": "string"
          }
        }
      },
      "models.HealthResponse": {
        "type": "object",
        "properties": {
          "database": {
            "type": "boolean"
          }
        }
      },
      "models.OrganizationInviteResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "declined": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          }
        }
      },
      "models.OrganizationResponse": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "models.SignatureResponse": {
        "type": "object",
        "properties": {
          "context": {
            "type": "string"
          },
          "golang_import_path_guest": {
            "type": "string"
          },
          "golang_import_path_host": {
            "type": "string"
          },
          "golang_registry": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "rust_import_path_guest": {
            "type": "string"
          },
          "rust_registry": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "models.UserInfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}